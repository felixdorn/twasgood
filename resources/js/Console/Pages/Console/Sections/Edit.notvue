<script lang="ts" setup>
import Connected from "@/Console/Layouts/Connected.vue";
import Input from "@/Console/Components/Input.vue";
import {
    Bars3BottomLeftIcon,
    DocumentIcon,
    LinkIcon,
    PlusCircleIcon,
    XMarkIcon,
} from "@heroicons/vue/24/outline";
import Button from "@/Console/Components/Button.vue";
import ModelSearch from "@/Console/Components/ModelSearch.vue";
import { Recipe, Section } from "@/Console/types";
import { Link, router, useForm } from "@inertiajs/vue3";
import { PencilIcon } from "@heroicons/vue/24/solid";
import SecondaryButton from "@/Console/Components/SecondaryButton.vue";
import { computed, ref } from "vue";
import draggable from "vuedraggable";
import Checkbox from "@/Console/Components/Checkbox.vue";

const props = defineProps<{
    section: Section & { recipes: Recipe[];};
    recipes: Recipe[];
}>();

const form = useForm({
    title: props.section.title,
    description: props.section.description,
    force_hide: props.section.force_hide,
});

const recipe = ref(null);
const selectedRecipe = computed({
    get() {
        return recipe.value;
    },
    set(value) {
        addRecipeForm.recipe = value.id;
        recipe.value = value;
    },
});
const addRecipeForm = useForm({
    recipe: null,
});
const sectionRecipes = computed({
    get: () => props.section.recipes,
    set: async (values: any) => {
        const form = useForm({
            recipes: values.map((value: any) => value.id),
        });

        await form.post(
            route(
                "console.sections.order",
                { section: props.section.id },
                {
                    preserveScroll: true,
                },
            ),
        );
    },
});

const addRecipe = (e) =>
    addRecipeForm.post(
        route("console.sections.attach", { section: props.section.id }),
        {
            onSuccess: () => {
                e.target.reset();
            },
        },
    );
</script>
<template>
    <Connected :title="`Éditer la partie &quot;${section.title}&quot;`">
        <div class="max-w-lg mx">
            <form @submit.prevent="
                form.post(
                    route('console.sections.update', {
                        section: section.id,
                    }),
                )
                ">
                <Input v-model="form.title" autofocus label="Titre" name="title"
                    placeholder="5 recettes pleines de fraîcheur" required type="text" />

                <Input v-model="form.description" :required="false" label="Description" name="description"
                    placeholder="De la fraïcheur dans l'assiette tout l'été" type="text" />

                <Checkbox v-model="form.force_hide" :checked="form.force_hide" label="Ne pas afficher la partie"
                    name="force_hide" />

                <Button class="mt-6"> Mettre à jour </Button>
            </form>

            <hr class="mt-8 mb-4" />

            <form class="flex items-end" @submit.prevent="addRecipe">
                <ModelSearch v-model="selectedRecipe" :models="recipes" class="w-full" label="Recettes"
                    placeholder="Chocolat chaud" required search-property="title" />
                <SecondaryButton class="ml-4 whitespace-nowrap" type="submit">
                    Ajouter la recette
                </SecondaryButton>
            </form>

            <div v-if="!section.recipes.length" class="py-4 px-6 mt-4 text-gray-700 bg-white rounded-xl border">
                Aucune recette dans la partie.
            </div>
            <div v-else class="mt-4 bg-white rounded-xl border">
                <draggable v-model="sectionRecipes" class="divide-y" ghost-class="bg-gray-100" item-key="order"
                    tag="ul">
                    <template #item="{ element }">
                        <li class="flex justify-between items-center py-4 px-6 cursor-move hover:bg-gray-50">
                            <div>
                                <span class="font-semibold">
                                    {{ element.title }}
                                </span>

                                <p class="max-w-xs truncate">
                                    {{ element.description }}
                                </p>
                            </div>

                            <form @submit.prevent="detachRecipe(element)">
                                <button class="mt-1">
                                    <XMarkIcon class="w-5 h-5 text-gray-400 hover:text-gray-500" />
                                </button>
                            </form>
                        </li>
                    </template>
                </draggable>
            </div>
        </div>
    </Connected>
</template>
